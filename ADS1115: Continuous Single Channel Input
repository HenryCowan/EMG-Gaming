/* Use the ADS1115 to record single channel input voltages. The 
   configuration register settings apply for:
   - Continuous Mode
   - 128 samples / second
   - Voltage range of 4.096V
   - Single-ended input (Channel 0) */

/*=========================================================================
    HEADERS AND LIBRARIES
-------------------------------------------------------------------------*/

#include <stdio.h>
#include <sys/types.h>      // open
#include <sys/stat.h>       // open
#include <fcntl.h>          // open
#include <unistd.h>         // read/write usleep
#include <stdlib.h>         // exit
#include <inttypes.h>       // uint8_t, etc
#include <linux/i2c-dev.h>  // I2C bus definitions

/*=========================================================================
    DEFINE VARIABLES
-------------------------------------------------------------------------*/

int fd;
int ads_address = 0x48;

int16_t val;

uint8_t writeBuf[3];
uint8_t readBuf[2];

float myfloat;

/* Divide the voltage range to volts per division for single-ended input */
const float VPS = 4.096 / 32768.0; //volts per step

/*=========================================================================
    MAIN()
-------------------------------------------------------------------------*/

int main() 
{
  /* Open device on /dev/i2c-1 */
  if ((fd = open("/dev/i2c-1", O_RDWR)) < 0) 
  {
    printf("Error: Couldn't open device! %d\n", fd);
    exit (1);
  }

  /* Connect to ADS1115 as I2C slave */
  if (ioctl(fd, I2C_SLAVE, ads_address) < 0) 
  {
    printf("Error: Couldn't find device on address!\n");
    exit (1);
  }


  /* Set config register
     AIN0 and GND, 4.096v, 128s/s, Continuous Mode */
  writeBuf[0] = 1;          // config register is 1
  writeBuf[1] = 0b11000100; // bit 15-8
  writeBuf[2] = 0b10000011; // bits 7-0
  
  while (1)
  {
    /* Begin conversion */
    if (write(fd, writeBuf, 3) != 3) 
    {
      perror("Write to register 1");
      exit(1);
    }

    /* Set pointer to 0 */
    readBuf[0] = 0;
    if (write(fd, readBuf, 1) != 1) 
    {
      perror("Write register select");
      exit(-1);
    }

    /* Read conversion register */
    if (read(fd, writeBuf, 2) != 2) 
    {
      perror("Read conversion");
      exit(-1);
    }
    
    val = readBuf[0] << 8 | readBuf[1];
  
    /* Convert to voltage */
    myfloat = val * VPS;    

  }     
  close(fd);

  return 0;
}
